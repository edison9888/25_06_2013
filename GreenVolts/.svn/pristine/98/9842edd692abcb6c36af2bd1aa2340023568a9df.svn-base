    //
//  ControlViewController.m
//  GreenVolts
//
//  Created by YML on 8/26/11.
//  Copyright 2011 YML. All rights reserved.
//

#import "ControlViewController.h"
#import "UITabBarItem+AFECustom.h"
#import "LoginManager.h"
#import "SBJson.h"
#import "GreenVoltsAppDelegate.h"
#import "MaintenancePlanView.h"
#import "MaintenanceLogView.h"
#import "ControlView.h"

#define ARRAY_FOR_TAB_BUTTONS [NSArray arrayWithObjects:@"Control", @"Maintenance Plan",@"Maintenance Log",nil]

@interface ControlViewController()<LoginManagerDelegate>

@property(nonatomic, strong) NSString *operationPerformed;
@property (nonatomic,strong)NSMutableArray *tabPageButtonsCollection;

-(void)connectToServer:(NSString *)pURLString;
-(void)jsonParser;
-(void)fetchSessionToken;
-(void)handleAction;
-(void)checkArrayLockStatus;
-(void)handleException:(int)errorCode andAdditionalMessage:(NSString*)message;
-(void)changeAccessToken;
- (void)valueChanged:(id)sender;

- (void) createPageTabsWithArray:(NSMutableArray *)tabButtonArray;

@end
//UIView *controlview;
UISegmentedControl *segmentedControl;
ControlView *controlview;
MaintenancePlanView *maintenanceplanview;
MaintenanceLogView *maintenancelogview;

@implementation ControlViewController

@synthesize operationPerformed;
@synthesize tabPageButtonsCollection;

-(id)init 
{
  if((self = [super init]))
  {
    m_PasswordTextField=nil;
    pTitleLabel=nil;
    
    mURLConnection=nil;
    mResponseData=nil;
    m_ActivityIndicatorView=nil;        
    actionState=UNAVAILABLE;
    moveDirection=NO_DIRECTION;
    isArrayLockStatusCheck=NO;
      
      self.tabBarItem.title = @"Service";
      
      self.tabBarItem.selectedImage = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Control" ofType:@"png"]];
      self.tabBarItem.unselectedImage = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"ControlDull" ofType:@"png"]];
  }
  return self;
}

- (void)dealloc 
{
  if(m_PasswordTextField){m_PasswordTextField=nil;}
  if(pTitleLabel){pTitleLabel=nil;}
  
  if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(mResponseData)
	{
		mResponseData=nil;
	}  
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];m_ActivityIndicatorView=nil;}    
  if(urlString)
  {
    urlString=nil;
  }
}


-(void)loadView
{
    
    self.view=[[UIView alloc]initWithFrame:[[UIScreen mainScreen]bounds]];
    self.view.backgroundColor=[UIColor colorWithRed:(10.6/100.0) green:(13.3/100.0) blue:(13.7/100.0) alpha:1.0];
    self.navigationController.navigationBar.tintColor=[UIColor blackColor];
    pTitleLabel=[[UILabel alloc]initWithFrame:CGRectMake(0, 8, 300, 30)];
    pTitleLabel.backgroundColor=[UIColor clearColor];
    pTitleLabel.font=[UIFont fontWithName:@"HelveticaNeue-Bold" size:18];
    pTitleLabel.textColor=[UIColor whiteColor];
    pTitleLabel.textAlignment=UITextAlignmentCenter;
    [self.navigationController.navigationBar addSubview:pTitleLabel];
 
/*    NSString *backbutton=[[NSUserDefaults standardUserDefaults]objectForKey:@"BACK_BUTTON"];
    NSLog(@"btn title:%@",backbutton);

    if([self.navigationController.viewControllers objectAtIndex:0])
      {
       m_Backbutton=[UIButton buttonWithType:UIButtonTypeCustom];
        m_Backbutton.frame=CGRectMake(5, 8, 72, 30);
        [m_Backbutton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:[[NSUserDefaults standardUserDefaults]objectForKey:@"BACK_BUTTON"] ofType:@"png"]] forState:UIControlStateNormal];
        [m_Backbutton addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];
       [self.navigationController.navigationBar addSubview:m_Backbutton];
     }
*/
    [self createPageTabsWithArray:ARRAY_FOR_TAB_BUTTONS];
    
} 
//-(void)backAction
//{
//    
//    [self.navigationController popViewControllerAnimated:YES];
//    
//}

- (void) createPageTabsWithArray:(NSMutableArray *)tabButtonArray

{
     
    UIImageView *tempTopPageTabsHolder = (UIImageView *)[self.view viewWithTag:5214];//adding an imageview with given tab image
   
   if (tempTopPageTabsHolder)
    {
        [tempTopPageTabsHolder removeFromSuperview];
        [tempTopPageTabsHolder.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
    }
    else
        tempTopPageTabsHolder = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"top_nav_black_slice.png"]];

    tempTopPageTabsHolder.userInteractionEnabled = YES;
    tempTopPageTabsHolder.tag = 5214;
    tempTopPageTabsHolder.backgroundColor = [UIColor clearColor];
    [tempTopPageTabsHolder setFrame:CGRectMake(0, 0, 360, 38)];
    
    [self.view addSubview:tempTopPageTabsHolder];
     
    int tempX = 0;
    
    UIButton *tempPageButton;
    
    UIImageView *tempButtonSeperator;
    
     if(self.tabPageButtonsCollection) 
       {
           if ([self.tabPageButtonsCollection count]) 
               [self.tabPageButtonsCollection removeAllObjects];

       }
     else
         self.tabPageButtonsCollection = [[NSMutableArray alloc] init]; 

   for(int i =0; i <[tabButtonArray count]; i++)
      {
        tempPageButton = [[UIButton alloc] initWithFrame:CGRectMake(tempX, 0, 110, 38)];  //creating buttons from default array
        
        tempPageButton.tag = i;
        [tempPageButton setTitle:[tabButtonArray objectAtIndex:i] forState:UIControlStateNormal];
        
        tempPageButton.titleLabel.font=[UIFont fontWithName:@"Helvetica-Bold" size:11];
       
        tempPageButton.backgroundColor = [UIColor clearColor];
        
        [tempPageButton addTarget:self action:@selector(tabPageButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
       
        [self.tabPageButtonsCollection addObject:tempPageButton];
       
        [tempTopPageTabsHolder addSubview:tempPageButton];                  //adding buttons to the tab image view
        
        
        
        tempButtonSeperator = [[UIImageView alloc] initWithFrame:CGRectMake(tempX-2, 0,2,38)];
        
        [tempButtonSeperator setImage:[UIImage imageNamed:@"top_nav_segcntrl_vertical separator.png"]];  
                                                                           //adding seperator image between buttons
        [self.view addSubview:tempButtonSeperator];
        
        tempX += 110;
        
          if(i == [tabButtonArray count]-1)
            
            {
              tempButtonSeperator = [[UIImageView alloc] initWithFrame:CGRectMake(tempX-2, 0,2,38)];
            
              [tempButtonSeperator setImage:[UIImage imageNamed:@"top_nav_segcntrl_vertical separator.png"]];
            
              [self.view addSubview:tempButtonSeperator];
            }
     
      }
    //default selection will go here
    [self tabPageButtonClicked:[self.tabPageButtonsCollection objectAtIndex:0]];

}

#pragma mark- Button Action

- (void)tabPageButtonClicked:(id)sender
{
  
    NSLog(@"control touch");
    
   UIButton *tempButton = (UIButton*) sender;                   //switching to different views on button click
    
        switch (tempButton.tag)
        {    
            case 0:
            {
                NSLog(@"control");
                if (!controlview) {
                    
                    controlview=[[ControlView alloc]initWithFrame:CGRectMake(0, 30, 310, 460)]; 
                }
                
                [self.view addSubview:controlview];

            }
                break;
                
            case 1:
            {
                NSLog(@"plan");
                [controlview removeFromSuperview];
                if (!maintenanceplanview) {
                    maintenanceplanview=[[MaintenancePlanView alloc]initWithFrame:CGRectMake(0, 40, 310, 460)]; 
                }

                [self.view addSubview:maintenanceplanview];

               /* NSString  *sessionToken=[[NSUserDefaults standardUserDefaults]objectForKey:@"SESSION_TOKEN"];
                NSString *siteID=[[NSUserDefaults standardUserDefaults]objectForKey:@"SITE_ID"];
                NSString *entityID=[[NSUserDefaults standardUserDefaults]objectForKey:@"ENTITY_ID"];
                
                NSString *entityscope=[[NSUserDefaults standardUserDefaults]objectForKey:@""];
                NSString *maintenancePlanTypeID=[[NSUserDefaults standardUserDefaults]objectForKey:@""];
                NSString *ownerID=[[NSUserDefaults standardUserDefaults]objectForKey:@""];
                NSString *completed=[[NSUserDefaults standardUserDefaults]objectForKey:@""];
                NSString *componentTypeID=[[NSUserDefaults standardUserDefaults]objectForKey:@""];*/
                
         /*   NSLog(@"URL Request: %@",[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web- Models-iPhone-iPhone_DS.svc/JSON/GetMaintenanceTask?sessionToken=%@",kserverAddress,sessionToken]);
    
               NSLog(@"URL Request: %@",[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetMaintenancePlansResult?sessionToken=%@&siteID=%@,entityScope=%@,entityID=%@&maintenancePlanTypeID=%@,ownerID=%@,completed=%@,componentTypeID=%@",kserverAddress,sessionToken,siteID,entityscope,entityID,maintenancePlanTypeID,ownerID,completed,componentTypeID]);
                
                 mURLConnection = [NSURLConnection connectionWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:[NSString stringWithFormat: @"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetMaintenancePlans?sessionToken=%@&siteID=%@&entity scope=%@&entityID=%@&maintenancePlanTypeID=%@&ownerID=%@&completed=%@&componentTypeID=%@",kserverAddress,sessionToken,siteID,entityscope,entityID,maintenancePlanTypeID,ownerID,completed,componentTypeID]]] delegate:self];*/
            }
            break;
            case 2:
            {
                NSLog(@"log");
                
                [maintenanceplanview removeFromSuperview];
                if (!maintenancelogview) {
                    maintenancelogview=[[MaintenanceLogView alloc]initWithFrame:CGRectMake(0, 40, 310, 460)];
                }
                [self.view addSubview:maintenancelogview];

            }
            break;

            default:
                break;
                
        }
 
        //makes the selected button green
        
        for(int i =0 ; i<[self.tabPageButtonsCollection count]; i++)
        {
            if(i == tempButton.tag)
                
            {
                [((UIButton*)[self.tabPageButtonsCollection objectAtIndex:i]) setBackgroundImage:[UIImage imageNamed: @"top_nav_segcntrl_green_slice.png"] forState:UIControlStateNormal];
                
                [((UIButton*)[self.tabPageButtonsCollection objectAtIndex:i]) setBackgroundImage:[UIImage imageNamed: @"top_nav_segcntrl_green_slice.png"] forState:UIControlStateHighlighted];
                
                [((UIButton*)[self.tabPageButtonsCollection objectAtIndex:i]) setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
                
            }
            else
            {
                [((UIButton*)[self.tabPageButtonsCollection objectAtIndex:i]) setBackgroundImage:nil  forState:UIControlStateNormal];
                
                
                [((UIButton*)[self.tabPageButtonsCollection objectAtIndex:i]) setTitleColor:[UIColor colorWithRed:1 green:1 blue:1 alpha:.698] forState:UIControlStateNormal];
                
            } 
        }    
        
}


-(void)buttonAction:(UIButton*)button
{
#ifdef DEMO_BUILD
    
    switch (button.tag)
    {
        case 1:
            self.operationPerformed = @"Face Up";
            break;
        case 2:
            self.operationPerformed = @"Face West";
            break;
        case 3:
            self.operationPerformed = @"Face East";
            break;
        case 4:
            self.operationPerformed = @"Face Down";
            break;
        case 5:
            self.operationPerformed = @"Lock";
            break;
        case 6:
            self.operationPerformed = @"Unlock";
            break;
        case 7:
            self.operationPerformed = @"Resume Tracking";
            break;
        default:
            self.operationPerformed = @"";
            break;
            
    }
    
    UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Are you sure?" delegate:self cancelButtonTitle:@"Yes" otherButtonTitles:@"No",nil];
    pAlert.tag=1;
    [pAlert show];
    //return;
#else
    
    [m_PasswordTextField resignFirstResponder];
    switch (button.tag)
    {
        case 1:
            //Face Up
            actionState=MOVE;
            moveDirection=UP;
            [self handleAction];
            break;
        case 2:
            //Face West
            actionState=MOVE;
            moveDirection=WEST;
            [self handleAction];
            break;
        case 3:
            //Face East
            actionState=MOVE;
            moveDirection=EAST;
            [self handleAction];
            break;
        case 4:
            //Face Down
            actionState=MOVE;
            moveDirection=DOWN;
            [self handleAction];
            break;
        case 5:
            //Lock
            actionState=LOCK;
            [self handleAction];
            break;
        case 6:
            //Unlock
            actionState=UNLOCK;
            [self handleAction];
            break;
        case 7:
            //Resume Tracking
            actionState=MOVE;
            moveDirection=RESUME;
            [self handleAction];
            break;
        default:
            break;
    }
#endif
}

#pragma mark - 

-(void)handleAction
{
  NSString *value = [m_PasswordTextField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
  if(value.length==0)
  {
    UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Reason for change is mandatory." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:NULL];
    pAlert.tag=0;
    [pAlert show];
    moveDirection=NO_DIRECTION;
    actionState=UNAVAILABLE;
  }
  else
  {
    UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Are you sure?" delegate:self cancelButtonTitle:@"Yes" otherButtonTitles:@"No",nil];
    pAlert.tag=1;
    [pAlert show];
  }
}

#pragma mark UIAlertView delegate Methods
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    
#ifdef DEMO_BUILD
    if (alertView.tag==1) {
        
        if (buttonIndex==0) {
            sleep(1);
            
            if(self.operationPerformed != @"")
            {
                UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:[NSString stringWithFormat:@"%@ Success", self.operationPerformed] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
                [pAlert show];
                pAlert=nil;  
            }
            
        }    
        
        
    }
    return;
#endif

  if(alertView.tag==0)
  {
    m_PasswordTextField.text=@"";
    [m_PasswordTextField becomeFirstResponder];
    return; 
  }
  if(buttonIndex==1)
    return;
  NSString *pSessionToken=[[NSUserDefaults standardUserDefaults]objectForKey:@"SESSION_TOKEN"];
  NSString *pEntityType=[[NSUserDefaults standardUserDefaults]objectForKey:@"ENTITY_TYPE"];
  NSString *pEntityId=[[NSUserDefaults standardUserDefaults]objectForKey:@"ID"];
  switch (actionState)
  {
    case MOVE:
    {
      NSArray *directionArray=[NSArray arrayWithObjects:@"UP",@"WEST",@"EAST",@"DOWN",@"RESUME",nil];
      NSString *direction=nil;
      if(moveDirection!=NO_DIRECTION)
        direction=[directionArray objectAtIndex:moveDirection];
      if(direction)
      {
        urlString=[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/MoveTracker?sessionToken=%@&entityScope=%@&entityID=%@&action=%@&logReason=%@",kserverAddress,pSessionToken,pEntityType,pEntityId,direction,[m_PasswordTextField.text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
        
        [self checkArrayLockStatus];
      }
    }
      break;
    case LOCK:
    {
      NSString *pString=[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/LockArray?sessionToken=%@&arrayID=%@&logReason=%@",kserverAddress,pSessionToken,pEntityId,[m_PasswordTextField.text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
      [self connectToServer:pString];
    }
      break;
    case UNLOCK:
    {
      NSString *pString=[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/UnLockArray?sessionToken=%@&arrayID=%@&logReason=%@",kserverAddress,pSessionToken,pEntityId,[m_PasswordTextField.text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
      [self connectToServer:pString];
    }
      break;
    default:
      break;
  }
}

-(void)viewWillAppear:(BOOL)animated
{
  m_PasswordTextField.text=@"";
  pTitleLabel.text=[[NSUserDefaults standardUserDefaults]objectForKey:@"ENTITY_NAME"];
}

#pragma mark URLConnectionManager Methods
-(void)checkArrayLockStatus
{
  if(m_ActivityIndicatorView)
  {
    [m_ActivityIndicatorView removeFromSuperview];
    m_ActivityIndicatorView=nil;
  }
  m_ActivityIndicatorView=[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(150, 200, 30, 30)];
  [m_ActivityIndicatorView startAnimating];
  m_ActivityIndicatorView.activityIndicatorViewStyle=UIActivityIndicatorViewStyleWhite;
  [self.view addSubview:m_ActivityIndicatorView];  
  
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(mResponseData)
	{
		mResponseData=nil;
	}
  NSString *pSessionToken=[[NSUserDefaults standardUserDefaults]objectForKey:@"SESSION_TOKEN"];
  NSString *pEntityId=[[NSUserDefaults standardUserDefaults]objectForKey:@"ID"];
    
    
  NSString *pURLString=[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetArrayLockStatus?sessionToken=%@&arrayID=%@",kserverAddress,pSessionToken,pEntityId];
	mURLConnection = [NSURLConnection connectionWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:pURLString]] delegate:self];
  isArrayLockStatusCheck=YES;
}
-(void)connectToServer:(NSString *)pURLString
{
  isArrayLockStatusCheck=NO;
  urlString=nil;
  urlString=[pURLString copy];
  if(m_ActivityIndicatorView)
  {
    [m_ActivityIndicatorView removeFromSuperview];
    m_ActivityIndicatorView=nil;
  }
  m_ActivityIndicatorView=[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(150, 200, 30, 30)];
  [m_ActivityIndicatorView startAnimating];
  m_ActivityIndicatorView.activityIndicatorViewStyle=UIActivityIndicatorViewStyleWhite;
  [self.view addSubview:m_ActivityIndicatorView];  
  
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(mResponseData)
	{
		mResponseData=nil;
	}
    
    
    NSLog(@"URL REQ");
    
 // NSLog(@"URL Request: %@",[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetMaintenancePlans?sessionToken=%@&siteID=%@&entity scope=%@&entityID=%@&maintenancePlanTypeID=%@&ownerID=%@&completed=%@&componentTypeID=%@&",kserverAddress,sessionToken,siteID,entityscope,entityID,maintenancePlanTypeID,ownerID,completed,componentTypeID]);  
   
	mURLConnection = [NSURLConnection connectionWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:pURLString]] delegate:self];
    
    

   
     
    
//NSLog(@"URL Request: %@",[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetMaintenancePlans?sessionToken=%@&siteID=%@&entity scope=%@&entityID=%@&maintenancePlanTypeID=%@&ownerID=%@&completed=%@&componentTypeID=%@&",kserverAddress,sessionToken,siteID,entityscope,entityID,maintenancePlanTypeID,ownerID,completed,componentTypeID]);
                                                                                       
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response 
{
  if(!mResponseData)
    mResponseData=[NSMutableData data];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
{
     
		[mResponseData appendData:data];
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error 
{
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];m_ActivityIndicatorView=nil;}
  
  UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Make sure your device has an active network connection and try again" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
  [pAlert show];
  pAlert=nil;        
  
  if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
	if(mResponseData)
	{
		mResponseData=nil;
	}
  
}

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace
{
  return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
  if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust])
    [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];m_ActivityIndicatorView=nil;}
  [self jsonParser];
}	

-(void)jsonParser
{
  NSString *responseString=[[NSString alloc]initWithData:mResponseData encoding:NSUTF8StringEncoding];
  mResponseData=nil;
  
  NSDictionary *data=[responseString JSONValue];
  if(isArrayLockStatusCheck)
  {
    NSDictionary *userResult= [data objectForKey:@"GetArrayLockStatusResult"]; 
    
    NSArray *rootResult = [userResult objectForKey:@"RootResults"];
    
    if([rootResult count])
    {
      NSDictionary *rootResultDict=[rootResult objectAtIndex:0];
      
      NSString *error=[rootResultDict objectForKey:@"Err"];
      
      NSDictionary *resultDict=[rootResult objectAtIndex:0];
      BOOL isArrayLocked=[[resultDict valueForKey:@"IsLocked"] boolValue];
      
      if(isArrayLocked)
      {
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:error delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
      }
      else
      {
        isArrayLockStatusCheck=NO;
        [self changeAccessToken];
        [self connectToServer:urlString];
      }
      
      NSNumber *errorId=[rootResultDict objectForKey:@"ErrID"];
      if([errorId intValue]==10001)
      {
        NSString *exception=[rootResultDict objectForKey:@"Err"];
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:exception delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
      } 
      if ([errorId intValue]==10003)
      {
        [self fetchSessionToken];
      }
    }
  }
  else
  {
    switch (actionState)
    {
      case MOVE:
      {
        NSDictionary *userResult= [data objectForKey:@"MoveTrackerResult"]; 
        
        NSArray *rootResult = [userResult objectForKey:@"RootResults"];
        
        if([rootResult count])
        {
          NSDictionary *rootResultDict=[rootResult objectAtIndex:0];
          
          NSObject *error=[rootResultDict objectForKey:@"Err"];
          
          if([error isKindOfClass:[NSNull class]])
          {
            urlString=nil;
            NSDictionary *resultDict=[rootResult objectAtIndex:0];
            
            NSObject *presultStatus=[resultDict objectForKey:@"Result"];
            if(![presultStatus isKindOfClass:[NSNull class]])
            {
              UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:[rootResultDict objectForKey:@"Result"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
              [pAlert show];
              pAlert=nil;  
              moveDirection=NO_DIRECTION;
            }
          }
          else 
          {
            NSNumber *errorId=[rootResultDict objectForKey:@"ErrID"];
            if ([errorId intValue]==10003)
            {
              [self handleException:10003 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10001)
            {
              [self handleException:10001 andAdditionalMessage:[rootResultDict objectForKey:@"Error"]];
            }
            else if([errorId intValue]==10014)
            {
              [self handleException:10014 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10015)
            {
              [self handleException:10015 andAdditionalMessage:[rootResultDict objectForKey:@"Error"]];
            }
            else if([errorId intValue]==10016)
            {
              [self handleException:10016 andAdditionalMessage:[rootResultDict objectForKey:@"Error"]];
            }
          }
        }
      }
        break;
      case LOCK:
      {
        NSDictionary *userResult= [data objectForKey:@"LockArrayResult"]; 
        
        NSArray *rootResult = [userResult objectForKey:@"RootResults"];
        
        if([rootResult count])
        {
          NSDictionary *rootResultDict=[rootResult objectAtIndex:0];
          
          NSObject *error=[rootResultDict objectForKey:@"Err"];
          
          if([error isKindOfClass:[NSNull class]])
          {
            urlString=nil;
            NSDictionary *resultDict=[rootResult objectAtIndex:0];
            
            NSObject *presultStatus=[resultDict objectForKey:@"Result"];
            if(![presultStatus isKindOfClass:[NSNull class]])
            {
              UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:[rootResultDict objectForKey:@"Result"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
              [pAlert show];
              pAlert=nil;  
              actionState=UNAVAILABLE;
            }
          }
          else 
          {
            NSNumber *errorId=[rootResultDict objectForKey:@"ErrID"];
            
            if([errorId intValue]==10001)
            {
              [self handleException:10001 andAdditionalMessage:[rootResultDict objectForKey:@"Err"]];
            }
            else if([errorId intValue]==10003)
            {
              [self handleException:10003 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10017)
            {
              [self handleException:10017 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10018)
            {
              [self handleException:10018 andAdditionalMessage:nil];
            }
          }
        }
      }
        break;
      case UNLOCK:
      {
        NSDictionary *userResult= [data objectForKey:@"UnLockArrayResult"]; 
        
        NSArray *rootResult = [userResult objectForKey:@"RootResults"];
        
        if([rootResult count])
        {
          NSDictionary *rootResultDict=[rootResult objectAtIndex:0];
          
          NSObject *error=[rootResultDict objectForKey:@"Err"];
          
          if([error isKindOfClass:[NSNull class]])
          {
            urlString=nil;
            NSDictionary *resultDict=[rootResult objectAtIndex:0];
            
            NSObject *presultStatus=[resultDict objectForKey:@"Result"];
            if(![presultStatus isKindOfClass:[NSNull class]])
            {
              UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:[rootResultDict objectForKey:@"Result"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
              [pAlert show];
              pAlert=nil;  
              actionState=UNAVAILABLE;
            }
          }
          else 
          {        
            NSNumber *errorId=[rootResultDict objectForKey:@"ErrID"];
            if([errorId intValue]==10001)
            {
              [self handleException:10001 andAdditionalMessage:[rootResultDict objectForKey:@"Err"]];
            }
            else if([errorId intValue]==10003)
            {
              [self handleException:10003 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10019)
            {
              [self handleException:10019 andAdditionalMessage:nil];
            }
            else if([errorId intValue]==10020)
            {
              [self handleException:10020 andAdditionalMessage:nil];
            }
          }
        }
      }
        break;
      default:
        break;
    }    
  }
}

#pragma mark LoginManagerDelegate methods
-(void)loginManager:(LoginManager*)manager loggedInSuccesfullyWithSessionToken:(NSString*)sessionToken
{
  [[NSUserDefaults standardUserDefaults]setObject:sessionToken forKey:@"SESSION_TOKEN"];  
  [self.navigationController dismissModalViewControllerAnimated:YES];
  
  GreenVoltsAppDelegate* appDelegate=(GreenVoltsAppDelegate*)[UIApplication sharedApplication].delegate;
  UITabBarController *tabBar=(UITabBarController *)appDelegate.RootViewController;
  tabBar.selectedIndex=0;
  [appDelegate tabBarController:tabBar didSelectViewController:nil];
  UINavigationController *navC=[tabBar.viewControllers objectAtIndex:0];
  [navC popToRootViewControllerAnimated:YES];
}

-(void)fetchSessionToken
{
  if(!m_Connection)
  {
    m_Connection=[[Connection alloc]init];
    m_Connection.m_delegate=self;
  }
  [m_Connection connectToServer];
  if(m_ActivityIndicatorView)
  {
    [m_ActivityIndicatorView removeFromSuperview];
    m_ActivityIndicatorView=nil;
  }
  m_ActivityIndicatorView=[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(150, 200, 30, 30)];
  [m_ActivityIndicatorView startAnimating];
  m_ActivityIndicatorView.activityIndicatorViewStyle=UIActivityIndicatorViewStyleWhite;
  [self.view addSubview:m_ActivityIndicatorView];  
}
#pragma mark -- ConnectionDelegate
-(void)ConnectionFailed
{
  UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Make sure your device has an active network connection and try again"  
    delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
  [pAlert show];
  pAlert=nil;
}
-(void)InvalidUserNameError:(int)errorIndex
{
  if(errorIndex==0)
  {
    UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Cannot connect to backend systems" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
    [pAlert show];
    pAlert=nil;              
  }
  else if(errorIndex==1)
  {
    [[LoginManager sharedLoginManagerWithDelegate:self] ShowLoginPage];
  }  
}
-(void)Success
{
  if(isArrayLockStatusCheck)
  {
    [self checkArrayLockStatus];
  }
  else
  {
    [self changeAccessToken];
    [self connectToServer:urlString];   
  }
  
}
#pragma mark UITextFieldDelegate methods

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
  [m_PasswordTextField resignFirstResponder];
  return YES;
}


- (void)didReceiveMemoryWarning {
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

-(void)handleException:(int)errorCode andAdditionalMessage:(NSString*)message
{
  switch (errorCode)
  {
    case 10001:
    {
      NSString *pMessage=@"";
      if(message)
        pMessage=message;
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Exception" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10003:
    {
      [self fetchSessionToken];
    }
      break;
    case 10014:
    {
      NSString *pMessage=@"Cannot issue command to tracker.";
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10015:
    {
      NSString *pMessage=@"Command failed with error: ";
      if(message)
        pMessage=[NSString stringWithFormat:@"%@%@",pMessage,message];
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10016:
    {
      NSString *pMessage=@"";
      if(message)
        pMessage=message;
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10017:
    {
      NSString *pMessage=@"Array already locked.";
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10018:
    {
      NSString *pMessage=@"Array lock failed.";
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10019:
    {
      NSString *pMessage=@"Array already unlocked.";
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    case 10020:
    {
      NSString *pMessage=@"Array unlock failed.";
      UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Error" message:pMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
      [alert show];
    }
      break;
    default:
      break;
  }
}
-(void)changeAccessToken
{
  NSString *query=[[urlString componentsSeparatedByString:@"?"] objectAtIndex:1];
  NSMutableArray *mutableQueryComponents=[NSMutableArray arrayWithArray:[query componentsSeparatedByString:@"&"]];
  for (int i=0;i<[mutableQueryComponents count];i++)
  {
    NSString *component=[mutableQueryComponents objectAtIndex:i];
    if([component hasPrefix:@"sessionToken="])
    {
      NSString *pSessionToken=[[NSUserDefaults standardUserDefaults]objectForKey:@"SESSION_TOKEN"];    
      component=[NSString stringWithFormat:@"sessionToken=%@",pSessionToken];
      [mutableQueryComponents replaceObjectAtIndex:i withObject:component];
      break;
    }
  }
  query=[mutableQueryComponents componentsJoinedByString:@"&"];
  NSString *serverPath=[[urlString componentsSeparatedByString:@"?"] objectAtIndex:0];
  urlString=[NSString stringWithFormat:@"%@?%@",serverPath,query];
}
@end
