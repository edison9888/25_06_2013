//
//  GreenVoltsAppDelegate.m
//  GreenVolts
//
//  Created by YML on 8/26/11.
//  Copyright 2011 YML. All rights reserved.
//

#import "GreenVoltsAppDelegate.h"
#import "SBJson.h"
#import "PortfolioViewController.h"
#import "SiteListTileView.h"
#import "SiteViewController.h"
#import "Site.h"
#import "Section.h"
#import "SectionViewController.h"
#import "Array.h"
#import "ArrayViewController.h"
#import "String.h"
#import "StringViewController.h"
#import "LoginViewController.h"
#import "SBJson.h"
#import "NSData+GVBlowfish.h"

@interface GreenVoltsAppDelegate(PVT)<AccelerometerObserverDelegate>
-(void)LoginSuccess:(NSString *)sessionToken;
-(void)jsonParser;
-(void)connectToServer;
- (void)setTabTabBarBadge:(int)badgeValue;
@end
PortfolioViewController *m_PortfolioViewController;

@implementation GreenVoltsAppDelegate
@synthesize RootViewController;
#pragma mark -
#pragma mark Application lifecycle
-(UIViewController*)RootViewController
{
  if(m_rootViewController)
    return m_rootViewController;
  return m_TabBarController;
}

void onUncaughtException(NSException* exception) {
    NSLog(@"uncaught exception: %@", exception.description);
    /*
    m_ActivityIndicatorView=[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(150, 200, 30, 30)];
    [m_ActivityIndicatorView startAnimating];
    m_ActivityIndicatorView.activityIndicatorViewStyle=UIActivityIndicatorViewStyleWhite;
    [window addSubview:m_ActivityIndicatorView];  
    
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
    if(mResponseData)
	{
		mResponseData=nil;
	}
    
    NSString *pUsername=[[NSUserDefaults standardUserDefaults]objectForKey:@"USERNAME"];
    
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
    
    [request setURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/SubmitException?username=%@&password=%@",kserverAddress,[[pUsername stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding], [exception.description stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
    
	[request setHTTPMethod:@"POST"];
	[[NSURLConnection alloc] initWithRequest:request delegate:self];	
*/
  //  @throw exception;
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{    
    NSLog(@"Finished launch");

    // Override point for customization after application launch.
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if ([defaults objectForKey:@"cleared_pass"] == nil) {
        [defaults setBool:NO forKey:@"RememberPassword"];
        [defaults setObject:nil forKey:@"PASSWORD1"];
        [defaults setObject:nil forKey:@"PASSWORD"];
        [defaults setBool:YES forKey:@"cleared_pass"];
    }
 
    
  window=[[UIWindow alloc]initWithFrame:[[UIScreen mainScreen]bounds]];
  m_rootViewController = [[RootViewController alloc] init];
  window.rootViewController = m_rootViewController;
  [window makeKeyAndVisible];
    
  m_TabBarController = nil;
  
  BOOL enabled = [[NSUserDefaults standardUserDefaults] boolForKey:@"RememberPassword"];
  if(enabled)
  {
    NSString *password=[[[NSUserDefaults standardUserDefaults]objectForKey:@"PASSWORD1"] decryptAsDES];
    if([password length])
    {
        [self connectToServer]; 
    }
    else 
    {
      [[NSUserDefaults standardUserDefaults]setObject:nil forKey:@"PASSWORD1"];
      [[LoginManager sharedLoginManagerWithDelegate:self] ShowLoginPage];
    }
  }
  else 
  {
    [[NSUserDefaults standardUserDefaults]setObject:nil forKey:@"PASSWORD1"];
    [[LoginManager sharedLoginManagerWithDelegate:self] ShowLoginPage];
  }

    
  BOOL shketoReloadEnabled=[[NSUserDefaults standardUserDefaults] boolForKey:@"ShakeEnabled"];
  
  if(shketoReloadEnabled)
  {
    mAccelerometerObserver=[[AccelerometerObserver alloc]initWithTimeGap:5];
    mAccelerometerObserver.m_delegate=self;
    [mAccelerometerObserver startObseving];
  }
  else 
    mAccelerometerObserver=nil;
  isShekeAllowed=YES;
  

  [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:kCurrentSelectedDateKey];
  [[NSUserDefaults standardUserDefaults] setObject:[[NSDate date] dateByAddingTimeInterval:-(24*60*60)*14] forKey:kDailyStartDateKey];
  [[NSUserDefaults standardUserDefaults] setObject:[[NSDate date] dateByAddingTimeInterval:-(24*60*60)*21] forKey:kWeeklyStartDateKey];
  [[NSUserDefaults standardUserDefaults] synchronize];
    
    NSSetUncaughtExceptionHandler(&onUncaughtException);  
    
  return YES;
}
-(void)clicked
{
//  PasswordChanger *p=[[PasswordChanger alloc]init];
//  [p changePassword];
}
-(void)showResult
{
    [[NSNotificationCenter defaultCenter]postNotificationName:@"RELOAD_DATA" object:nil userInfo:nil];
}

#pragma mark URLConnectionManager Methods

-(void)connectToServer
{
  m_ActivityIndicatorView=[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(150, 200, 30, 30)];
  [m_ActivityIndicatorView startAnimating];
  m_ActivityIndicatorView.activityIndicatorViewStyle=UIActivityIndicatorViewStyleWhite;
  [window addSubview:m_ActivityIndicatorView];  
  
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(mResponseData)
	{
		mResponseData=nil;
	}
  
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
  
  NSString *pUsername=[[NSUserDefaults standardUserDefaults]objectForKey:@"USERNAME"];
  NSString *pPassword=[[[NSUserDefaults standardUserDefaults]objectForKey:@"PASSWORD"] decryptAsDES];
    
  [request setURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/GreenVolts-ISIS-BL-Web-Models-iPhone-iPhone_DS.svc/JSON/GetUserInfo?username=%@&password=%@",kserverAddress,[pUsername stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],[pPassword stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];

	[request setHTTPMethod:@"GET"];
	mURLConnection = [[NSURLConnection alloc] initWithRequest:request delegate:self];	
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response 
{
	if(mResponseData == nil)
		mResponseData = [[NSMutableData alloc] init];
	[mResponseData setLength:0];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
{
   
	if(mResponseData != nil)
		[mResponseData appendData:data];
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error 
{
  //  Error Codes: 
  //  10001 – cannot connect to backend systems
  //  10002 – invalid username or password (displays an error message on top of the screen)
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];m_ActivityIndicatorView=nil;}
  
  UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:@"Make sure your device has an active network connection and try again"  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:NULL];
  [pAlert show];
  pAlert=nil;        
  
  if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
	if(mResponseData)
	{
		mResponseData=nil;
	}
    
}

- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
    BOOL enabled = [[NSUserDefaults standardUserDefaults] boolForKey:@"RememberPassword"];
    if(enabled) 
        [self connectToServer];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];;m_ActivityIndicatorView=nil;}
  
	if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  
  [self jsonParser];
}	

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace
{
  return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
{
  if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust])
    [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
}

-(void)jsonParser
{
  // parsing the first level    
  
  NSString *responseString=[[NSString alloc]initWithData:mResponseData encoding:NSUTF8StringEncoding];
  
  //printf("\nJson String:%s\n",[responseString UTF8String]);
  
  NSDictionary *data=[responseString JSONValue];
  
  NSDictionary *userResult= [data objectForKey:@"GetUserInfoResult"]; 
  
  NSArray *rootResult = [userResult objectForKey:@"RootResults"];
  
  if([rootResult count])
  {
    NSDictionary *rootResultDict=[rootResult objectAtIndex:0];
    
    NSString *sessionToken=[rootResultDict objectForKey:@"SessionToken"];
      
    if([sessionToken isKindOfClass:[NSNull class]])
    {
      UIAlertView *pAlert=[[UIAlertView alloc]initWithTitle:@"" message:[rootResultDict objectForKey:@"Err"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:NULL];
      [pAlert show];
      pAlert=nil;    
      int errorID=[[rootResultDict objectForKey:@"ErrID"] intValue];
      if(errorID==10002 || errorID == 10026 || errorID == 10028 || errorID == 10029)
      {
        [[LoginManager sharedLoginManagerWithDelegate:self] ShowLoginPage];
      }
    }
    else 
    {
      [[NSUserDefaults standardUserDefaults]setObject:sessionToken forKey:@"SESSION_TOKEN"];
      [self LoginSuccess:sessionToken];
    }
  }
  if(mResponseData)
	{
		mResponseData=nil;
	}  
}


- (void)creatingTwoTabBarControllers
{
    
    //NSLog(@"TWO TABS HERE");
    
    
    [pDashboardButton removeFromSuperview];         /*removing images from previousviews*/
    [pControlButton removeFromSuperview];
    [pAlertButton removeFromSuperview];
    
    m_PortfolioViewController =[[PortfolioViewController alloc]init];
    UINavigationController * pRootNavigationController=[[UINavigationController alloc]initWithRootViewController: m_PortfolioViewController];
    pRootNavigationController.delegate=self;
    pRootNavigationController.tabBarItem.title=@"Dashboards";
    pRootNavigationController.navigationBar.barStyle=UIBarStyleBlack;
    
    m_AlertViewController=[[AlertViewController alloc]init];
    UINavigationController *pAlertNavViewController=[[UINavigationController alloc]initWithRootViewController:m_AlertViewController];
    pAlertNavViewController.delegate=self;
    pAlertNavViewController.tabBarItem.title=@"Alerts";
    
    
    pnavigArray=[[NSMutableArray alloc]initWithObjects:pRootNavigationController,pAlertNavViewController,nil];
    
	[m_TabBarController setViewControllers:pnavigArray];
	m_TabBarController.selectedIndex=0;
    m_TabBarController.tabBar.hidden=NO;
    m_rootViewController=nil;
    //window.rootViewController=m_TabBarController;
    
    
    pDashboardButton=[UIButton buttonWithType:UIButtonTypeCustom];
    pDashboardButton.frame=CGRectMake(65, 423+18, 30,22);
    [pDashboardButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Dash" ofType:@"png"]] forState:UIControlStateNormal];
    pDashboardButton.userInteractionEnabled=NO;
    [window addSubview:pDashboardButton];  
    
   
    pAlertButton=[UIButton buttonWithType:UIButtonTypeCustom];
    pAlertButton.frame=CGRectMake(228, 418+18, 28,28);
    [pAlertButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"AlertDull" ofType:@"png"]] forState:UIControlStateNormal];
    pAlertButton.userInteractionEnabled=NO;
    [window addSubview:pAlertButton];
    [self setTabTabBarBadge:2];
}

-(void)creatingThreeTabBarControllers
{
    //method for creating three tabbarcontrollers on second view
    
    m_ControlViewController=[[ControlViewController alloc]init];
    UINavigationController *pControlNavViewController=[[UINavigationController alloc]initWithRootViewController:m_ControlViewController];
    pControlNavViewController.delegate=self;
    pControlNavViewController.tabBarItem.title=@"Control";
    
    
    [pnavigArray removeAllObjects];
    UINavigationController *dashboardNavController  = (m_TabBarController.viewControllers.count >= 1)? [m_TabBarController.viewControllers objectAtIndex:0]:nil;
    UINavigationController *alertsNavController  = (m_TabBarController.viewControllers.count >= 2)?[m_TabBarController.viewControllers objectAtIndex:1]:nil;
    
    if(!(dashboardNavController || alertsNavController))
    {
        return;
        // This needs to be changed to create the viecontrollers if any found missing
    }
    
    [pnavigArray addObject:dashboardNavController];
    [pnavigArray addObject:pControlNavViewController];
    [pnavigArray addObject:alertsNavController];
    
    
    [m_TabBarController setViewControllers:pnavigArray];
	m_TabBarController.selectedIndex=0;
    m_TabBarController.tabBar.hidden=NO;
    m_rootViewController=nil;
    //window.rootViewController=m_TabBarController;
    
    [pDashboardButton removeFromSuperview];
    [pControlButton removeFromSuperview];
    [pAlertButton removeFromSuperview];
    
    pDashboardButton=[UIButton buttonWithType:UIButtonTypeCustom];
    pDashboardButton.frame=CGRectMake(38, 423+18, 30,22);
    [pDashboardButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Dash" ofType:@"png"]] forState:UIControlStateNormal];
    pDashboardButton.userInteractionEnabled=NO;
    [window addSubview:pDashboardButton];  
    
    pControlButton=[UIButton buttonWithType:UIButtonTypeCustom];
    pControlButton.frame=CGRectMake(147, 418+18, 26,28);
    [pControlButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"ControlDull" ofType:@"png"]] forState:UIControlStateNormal];
    pControlButton.userInteractionEnabled=NO;
    [window addSubview:pControlButton];  
    
    pAlertButton=[UIButton buttonWithType:UIButtonTypeCustom];
    pAlertButton.frame=CGRectMake(252, 418+18, 28,28);
    [pAlertButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"AlertDull" ofType:@"png"]] forState:UIControlStateNormal];
    pAlertButton.userInteractionEnabled=NO;
    [window addSubview:pAlertButton];
    
    [self setTabTabBarBadge:3];
    
    }
    
    
   

- (void)setTabTabBarBadge:(int)badgeValue
{
    NSString *badgeNumber = [NSString stringWithFormat:@"%d",badgeValue];
    NSLog(@"BADGE NUMBER %@",badgeNumber);
   [[m_TabBarController.tabBar.items lastObject] setBadgeValue:badgeNumber]; 
}



-(void)LoginSuccess:(NSString *)sessionToken
{
  m_TabBarController= [[UITabBarController alloc] init];
  m_TabBarController.delegate=self;
  m_TabBarController.tabBar.hidden=YES;
  window.rootViewController=m_TabBarController;  

     [self creatingTwoTabBarControllers];    
}

- (void)applicationWillResignActive:(UIApplication *)application 
{
  
}

- (void)applicationDidEnterBackground:(UIApplication *)application 
{
}

- (void)applicationWillEnterForeground:(UIApplication *)application 
{
  
}

- (void)applicationDidBecomeActive:(UIApplication *)application 
{
  
}

- (void)applicationWillTerminate:(UIApplication *)application 
{
  
}

-(void) disableTabbarControlAtBottomFully
{
#ifdef DEMO_BUILD
    m_TabBarController.tabBar.alpha = 0.4;
#endif
}
-(void) enableTabbarControlAtBottomAsPerEntity
{
#ifdef DEMO_BUILD    
    m_TabBarController.tabBar.alpha = 1.0;
#endif
}


#pragma mark UITabBarController delegate methods

- (void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController
{
  if(tabBarController.selectedIndex==0)
  {
    [pDashboardButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Dash" ofType:@"png"]] forState:UIControlStateNormal];
    [pControlButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"ControlDull" ofType:@"png"]] forState:UIControlStateNormal];
    [pAlertButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"AlertDull" ofType:@"png"]] forState:UIControlStateNormal];
  }
  else if(tabBarController.selectedIndex==1)
  {
    [pDashboardButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"DashDull" ofType:@"png"]] forState:UIControlStateNormal];
    [pControlButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Control" ofType:@"png"]] forState:UIControlStateNormal];
    [pAlertButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"AlertDull" ofType:@"png"]] forState:UIControlStateNormal];
  }
  else if(tabBarController.selectedIndex==2)
  {
    [pDashboardButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"DashDull" ofType:@"png"]] forState:UIControlStateNormal];
    [pControlButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"ControlDull" ofType:@"png"]] forState:UIControlStateNormal];
    [pAlertButton setImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:@"Alert" ofType:@"png"]] forState:UIControlStateNormal];
  }
}

#pragma mark UINavigationControllerDelegate methods

- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated
{
//  [viewController viewWillAppear:animated];
}

- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated
{
//  [viewController viewDidAppear:animated];
}

#pragma mark UITabBarControllerDelegate methods
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController
{
    return YES;
    
  if([[NSUserDefaults standardUserDefaults]boolForKey:@"ControlEnabled"])
  {
    return YES;
  }
  else if([[NSUserDefaults standardUserDefaults]boolForKey:@"AlertEnabled"])
  {
    if(([tabBarController.viewControllers objectAtIndex:0] == viewController) || ([tabBarController.viewControllers objectAtIndex:2] == viewController))
    {
      return YES;
    }
    else 
      return NO;    
  }
  else 
  {
    if(([tabBarController.viewControllers objectAtIndex:0] == viewController))
    {
      return YES;
    }
    else 
      return NO;
  }
}

#pragma mark -
#pragma mark Memory management

- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application {
    /*
     Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.
     */
}


- (void)dealloc 
{
  if(m_NavigationController){m_NavigationController=nil;}
  if(mAccelerometerObserver){mAccelerometerObserver=nil;}
  if(mURLConnection) 
	{
		[mURLConnection cancel];
		mURLConnection=nil;
	}
  if(mResponseData)
	{
		mResponseData=nil;
	}  
  if(m_ActivityIndicatorView){[m_ActivityIndicatorView removeFromSuperview];m_ActivityIndicatorView=nil;}
}


#pragma mark -- LoginManagerDelegate
-(void)loginManager:(LoginManager*)manager loggedInSuccesfullyWithSessionToken:(NSString*)sessionToken
{
  [self LoginSuccess:sessionToken];
}
-(void)loginManagerFoundNoRootViewController
{
  if(m_TabBarController)
  {
    m_TabBarController=nil;
  }
  m_TabBarController= [[UITabBarController alloc] init];
  m_TabBarController.delegate=self;
  m_TabBarController.tabBar.hidden=YES;
//  window.rootViewController=m_TabBarController;  
  [[LoginManager sharedLoginManagerWithDelegate:self] ShowLoginPage];
}
@end
