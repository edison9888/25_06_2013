//
//  LoginViewController.m
//  NotiyiiPhoneApplicationProject
//
//  Created by Veena on 10/09/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "LoginViewController.h"
#import "AppDelegate.h"
#import "NotifyiConstants.h"
#import "GeneralClass.h"
#import "SBJSON.h"
#import "JSON.h"

UIView *syncView;
SyncManager *syncManager;

@interface LoginViewController ()
{
    BOOL isInvalidUsernameOrPassword;
    BOOL isError;
    
}
-(void) setFontForControlls;
-(void)callLoginAPI;
-(void)startSyncing;
- (void)setCustomOverlay;

-(BOOL)isLoginSuccess;


@property(strong,nonatomic)IBOutlet UITextField *userNameTextField;
@property(strong,nonatomic)IBOutlet UITextField *passwordTextField;

@end

@implementation LoginViewController
@synthesize userNameTextField;
@synthesize passwordTextField;

#pragma mark- Init Load
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        
        
    }
    return self;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"logged_in"];
    passwordTextField.secureTextEntry = YES;
    userNameTextField.delegate = self;
    passwordTextField.delegate = self;
    
    [self setFontForControlls];
    
    NSLog(@"%@",[[NSUserDefaults standardUserDefaults] stringForKey:@"USERNAME"]);
    userNameTextField.text = [[NSUserDefaults standardUserDefaults] stringForKey:@"USERNAME"];
    userNameTextField.text = @"nithin@gmail.com";
    passwordTextField.text = @"password";
}

#pragma mark- Methods
/*******************************************************************************
 *  Function Name:isLoginSuccess.
 *  Purpose: Validate Username and Password.
 *  Parametrs:nil.
 *  Return Values:BOOL,if valid return YES else NO.
 ********************************************************************************/
-(BOOL)isLoginSuccess
{
    BOOL result;
    NSLog(@"Username===%@",userNameTextField.text);
    NSLog(@"Password===%@",passwordTextField.text);
    if([userNameTextField.text length]==0 && [passwordTextField.text length] ==0)
    {
        NSLog(@"Invalid Login");
        [GeneralClass showAlertView:self
                                msg:NSLocalizedString(@"ENTER USERNAME AND PASSWORD MESSAGE", nil)
                              title:NSLocalizedString(@"PLEASE CHECK YOUR DETAILS",nil)
                        cancelTitle:@"Ok"
                         otherTitle:nil];

        isInvalidUsernameOrPassword = YES;
        result=NO;
    }
    else if([NSNull null]==(NSNull*)userNameTextField.text || [userNameTextField.text isEqualToString:@""])
    {
        [GeneralClass showAlertView:nil
                                msg:NSLocalizedString(@"ENTER USERNAME MESSAGE", nil)
                              title:NSLocalizedString(@"PLEASE CHECK YOUR DETAILS",nil)
                        cancelTitle:@"Ok"
                         otherTitle:nil];
        
        result=NO;
        
    }
    else if([NSNull null]==(NSNull*)passwordTextField.text || [passwordTextField.text isEqualToString:@""])
    {
        [GeneralClass showAlertView:nil
                                msg:NSLocalizedString(@"ENTER PASSWORD MESSAGE", nil)
                              title:NSLocalizedString(@"PLEASE CHECK YOUR DETAILS",nil)
                        cancelTitle:@"Ok"
                         otherTitle:nil];
        result=NO;
        
        
    }
    else
    {
        result = [GeneralClass emailValidation:userNameTextField.text];
    }
    
    return result;
}

/*******************************************************************************
 *  Function Name:setFontForControlls.
 *  Purpose: To set font for Controllers.
 *  Parametrs:nil.
 *  Return Values:nil.
 ********************************************************************************/
-(void) setFontForControlls
{
    userNameTextField.font = [GeneralClass getFont:titleFont and:regularFont];
    passwordTextField.font = [GeneralClass getFont:titleFont and:regularFont];
    loginButton.titleLabel.font = [GeneralClass getFont:titleFont and:boldFont];
    forgotPasswordButton.titleLabel.font = [GeneralClass getFont:buttonFont and:boldFont];
    contactUsButton.titleLabel.font =  [GeneralClass getFont:buttonFont and:boldFont];
}

- (void)setCustomOverlay
{
    if(!syncView)
    {
        syncView = [[UIView alloc]init];
        syncView.frame = self.view.frame;
        UIActivityIndicatorView *syncingActivityIndicator = [[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(60, 160, 200, 200)];
        syncingActivityIndicator.backgroundColor = [UIColor clearColor];
        syncingActivityIndicator.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;
        [syncingActivityIndicator startAnimating];
        [syncView addSubview:syncingActivityIndicator];
    }
    
    [self.view addSubview:syncView];
}

- (void)startSyncing
{
    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"logged_in"];
    //signature at inbox
    NSString * email = userNameTextField.text;
    [[NSUserDefaults standardUserDefaults] setObject:email forKey:@"USERNAME"];
    //password lock
    NSString * passwordLockKey = passwordTextField.text;
    [[NSUserDefaults standardUserDefaults] setObject:passwordLockKey forKey:@"PASSWORD"];
    
    if (!syncManager) 
    {
        syncManager = [[SyncManager alloc]init];
        syncManager.delegate = self;
    }
    [syncManager inboxParsing];
}

#pragma mark- Touch Delegates
/*******************************************************************************
 *  Function Name: touchesBegan.
 *  Purpose: To delegate back ground touch events.
 *  Parametrs:event.
 *  Return Values:nil.
 ********************************************************************************/
- (void) touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event
{
	NSLog(@"Background touched ");
	[userNameTextField resignFirstResponder];
	[passwordTextField resignFirstResponder];
    
}
#pragma mark- TextField delegate
/*******************************************************************************
 *  UITextField delegate.
 ********************************************************************************/
-(BOOL)textFieldShouldReturn:(UITextField*)textField
{
    NSLog(@"textFieldShouldReturn:");
    if (textField.tag == 1) {
        // if Found next responder, so set it.
        UITextField *nextTextField = (UITextField *)[self.view viewWithTag:2];
        [nextTextField becomeFirstResponder];
    }
    else {
        // if Not found, so remove keyboard.
        [self loginButtonTouched:nil];
        [textField resignFirstResponder];
    }
    return NO;
}
#pragma mark- Button Actions
/*******************************************************************************
 *  ContactUs button Touch action.
 ********************************************************************************/
- (IBAction)contactUsButtonTouched:(id)sender
{
    [GeneralClass clickableLinkMethod:@"http://www.notifyi.com/contact-us/"];
}

/*******************************************************************************
 *  Forgot password button Touch action.
 ********************************************************************************/
- (IBAction)forgotPasswordButtonTouched:(id)sender
{
    [GeneralClass clickableLinkMethod:@"https://app.notifyi.com/Security/ForgotPassword"];
    
}

- (IBAction)loginButtonTouched:(id)sender
{
    [loginButton setUserInteractionEnabled:NO];
    BOOL isValidLogin = [self isLoginSuccess];
    if (isValidLogin)
    {
        [self setCustomOverlay];
        syncView.backgroundColor = [UIColor clearColor];
        [self callLoginAPI];
    }
    else
    {
        
    }
    
    [userNameTextField resignFirstResponder];
    [passwordTextField resignFirstResponder];
}
/*******************************************************************************
 *  Function Name:fetchInboxDetails.
 *  Purpose: To delegate inbox jsonParsor.
 *  Parametrs:nil.
 *  Return Values:nil.
 ********************************************************************************/
-(void)callLoginAPI
{
    NSString *userName = self.userNameTextField.text;
    NSString *password = self.passwordTextField.text;
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         userName, @"userName", password, @"password", nil];
    JsonParser *objParser=[[JsonParser alloc] init];
    NSString *jsonRep = [dic JSONRepresentation];
    objParser.delegate=self;
    [objParser parseJson:LoginAPI:jsonRep];
}

#pragma mark- parser delegates
/*******************************************************************************
 *  Function Name: parseCompleteSuccessfully,parseFailedWithError.
 *  Purpose: To delegate the json parser.
 *  Parametrs:Array of resulted parserObject.
 *  Return Values:nil.
 ********************************************************************************/
-(void)parseCompleteSuccessfully:(ParseServiseType) eparseType:(NSArray *)result
{
    NSLog(@"Parse complete");
    [self startSyncing];
    
}
-(void)invalidUserNameORPassword
{
    [GeneralClass showAlertView:self
                            msg:NSLocalizedString(@"INVALID USERNAME AND PASSWORD MESSAGE", nil)
                          title:NSLocalizedString(@"PLEASE CHECK YOUR DETAILS",nil)
                    cancelTitle:@"Ok"
                     otherTitle:nil];
    isInvalidUsernameOrPassword = YES;
}
-(void)parseFailedWithError:(ParseServiseType) eparseType:(NSError *)error:(int)errorCode
{
    
    NSLog(@"Parse Error");
    [GeneralClass showAlertView:self msg:@"Error in data.Do you want to continue?" title:nil cancelTitle:@"YES" otherTitle:@"NO"];
    isError = YES;
}

#pragma mark- Sync Delegates
- (void)SyncCompletedWithSuccess
{
    [loginButton setUserInteractionEnabled:NO];
    [syncView removeFromSuperview];
    
    AppDelegate *app= (AppDelegate *)[[UIApplication sharedApplication] delegate];
    [app addTabBarToDisplay];
}
- (void)SyncCompletedWithError
{
    [loginButton setUserInteractionEnabled:NO];
}

#pragma mark- UIAlertView delegate
- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    [loginButton setUserInteractionEnabled:YES];
    
    if(isInvalidUsernameOrPassword)
    {
        if (buttonIndex == 0)
        {
            userNameTextField.text = @"";
            passwordTextField.text = @"";
            
        }
        isInvalidUsernameOrPassword = NO;
        
    }
    else if(isError)
    {
        if(buttonIndex == 0)
        {
            [self callLoginAPI];
            [userNameTextField resignFirstResponder];
            [passwordTextField resignFirstResponder];

        }
        else{
            userNameTextField.text = @"";
            passwordTextField.text = @"";
            
        }
        isError = NO;
    }
}
#pragma mark- Memory dealloc
- (void)viewDidUnload
{
    [self setUserNameTextField:nil];
    [self setPasswordTextField:nil];
    [super viewDidUnload];
}
#pragma mark- Orientation
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

@end
